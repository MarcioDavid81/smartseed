// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// empresa
model Company {
  id                 String                @id @default(uuid())
  name               String
  plan               Plan?                 @default(BASIC)
  farms              Farm[]
  users              User[]
  customers          Customer[]
  cultivars          Cultivar[]
  talhoes            Talhao[]
  harvests           Harvest[]
  beneficiations     Beneficiation[]
  buys               Buy[]
  consumptionsExit   ConsumptionExit[]
  salesExit          SaleExit[]
  products           Product[]
  purchases          Purchase[]
  transfers          TransferExit[]
  applications       Application[]
  productStocks      ProductStock[]
  productionCycles   ProductionCycle[]
  accountsPayable    AccountPayable[]
  accountsReceivable AccountReceivable[]
  industryDeposits   IndustryDeposit[]
  industryHarvests   IndustryHarvest[]
  transporters       IndustryTransporter[]
  industryStocks     IndustryStock[]
  createdAt          DateTime              @default(now())
}

// fazenda
model Farm {
  id               String            @id @default(uuid())
  name             String
  talhoes          Talhao[]
  area             Float
  productStocks    ProductStock[]
  purchases        Purchase[]
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        String
  originTransfers  TransferExit[]    @relation("OriginFarm")
  destTransfers    TransferExit[]    @relation("DestFarm")
  createdAt        DateTime          @default(now())
}

// usuário
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  imageUrl  String?
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  role      Role?    @default(USER)
  createdAt DateTime @default(now())
}

// plano
enum Plan {
  BASIC
  PREMIUM
}

//roles
enum Role {
  ADMIN
  USER
}

// clientes
model Customer {
  id                 String              @id @default(uuid())
  name               String
  email              String?
  adress             String?
  city               String?
  state              String?
  phone              String?
  cpf_cnpj           String?             @unique
  company            Company             @relation(fields: [companyId], references: [id])
  companyId          String
  sales              SaleExit[]
  buys               Buy[]
  purchases          Purchase[]
  accountsReceivable AccountReceivable[]
  accountsPayable    AccountPayable[]
  createdAt          DateTime            @default(now())
}

// enums para produtos
enum ProductType {
  SOJA
  TRIGO
  MILHO
  AVEIA_BRANCA
  AVEIA_PRETA
  AVEIA_UCRANIANA
  AZEVEM
}

//enums para operações
enum OperationType {
  Colheita
  Compra
  Descarte
  Venda
  Plantio
}

//talhões
model Talhao {
  id               String            @id @default(cuid())
  name             String
  area             Float
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        String
  farmId           String
  farm             Farm              @relation(fields: [farmId], references: [id])
  harvests         Harvest[]
  consumptionsExit ConsumptionExit[]
  applications     Application[]
  industryHarvests IndustryHarvest[]
  cycles           CycleTalhao[]
  createdAt        DateTime          @default(now())
}

// status do cultivar
enum CultivarStatus {
  BENEFICIANDO
  BENEFICIADO
}

// produto/cultivar (variedade específica)
model Cultivar {
  id               String            @id @default(cuid())
  name             String
  product          ProductType
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        String
  harvests         Harvest[]
  buys             Buy[]
  beneficiations   Beneficiation[]
  consumptionsExit ConsumptionExit[]
  saleExit         SaleExit[]
  stock            Float             @default(0)
  status           CultivarStatus    @default(BENEFICIANDO)
  createdAt        DateTime          @default(now())
}

// colheita
model Harvest {
  id         String           @id @default(cuid())
  cultivarId String
  cultivar   Cultivar         @relation(fields: [cultivarId], references: [id])
  date       DateTime
  quantityKg Float
  talhaoId   String
  talhao     Talhao           @relation(fields: [talhaoId], references: [id])
  companyId  String
  company    Company          @relation(fields: [companyId], references: [id])
  notes      String?
  type       OperationType    @default(Colheita)
  cycleId    String?
  cycle      ProductionCycle? @relation(fields: [cycleId], references: [id])
  createdAt  DateTime         @default(now())
}

//compras
model Buy {
  id               String            @id @default(cuid())
  cultivarId       String
  cultivar         Cultivar          @relation(fields: [cultivarId], references: [id])
  date             DateTime
  invoice          String
  unityPrice       Float
  totalPrice       Float
  customerId       String
  customer         Customer          @relation(fields: [customerId], references: [id])
  quantityKg       Float
  notes            String?
  companyId        String
  company          Company           @relation(fields: [companyId], references: [id])
  type             OperationType     @default(Compra)
  cycleId          String?
  cycle            ProductionCycle?  @relation(fields: [cycleId], references: [id])
  paymentCondition PaymentCondition?
  dueDate          DateTime? // só se for a prazo
  accountPayable   AccountPayable?
  createdAt        DateTime          @default(now())
}

// beneficiamento
model Beneficiation {
  id         String           @id @default(cuid())
  cultivarId String
  cultivar   Cultivar         @relation(fields: [cultivarId], references: [id])
  date       DateTime
  quantityKg Float
  notes      String?
  companyId  String
  company    Company          @relation(fields: [companyId], references: [id])
  type       OperationType    @default(Descarte)
  cycleId    String?
  cycle      ProductionCycle? @relation(fields: [cycleId], references: [id])
  createdAt  DateTime         @default(now())
}

//saída para plantio
model ConsumptionExit {
  id         String           @id @default(cuid())
  cultivarId String
  cultivar   Cultivar         @relation(fields: [cultivarId], references: [id])
  date       DateTime
  quantityKg Float
  talhaoId   String
  talhao     Talhao           @relation(fields: [talhaoId], references: [id])
  notes      String?
  companyId  String
  company    Company          @relation(fields: [companyId], references: [id])
  type       OperationType    @default(Plantio)
  cycleId    String?
  cycle      ProductionCycle? @relation(fields: [cycleId], references: [id])
  createdAt  DateTime         @default(now())
}

//venda
model SaleExit {
  id                String             @id @default(cuid())
  cultivarId        String
  cultivar          Cultivar           @relation(fields: [cultivarId], references: [id])
  date              DateTime
  quantityKg        Float
  customerId        String?
  customer          Customer?          @relation(fields: [customerId], references: [id])
  invoiceNumber     String?
  saleValue         Float?
  notes             String?
  companyId         String
  company           Company            @relation(fields: [companyId], references: [id])
  type              OperationType      @default(Venda)
  cycleId           String?
  cycle             ProductionCycle?   @relation(fields: [cycleId], references: [id])
  paymentCondition  PaymentCondition?
  dueDate           DateTime? // só se for a prazo
  accountReceivable AccountReceivable?
  createdAt         DateTime           @default(now())
}

//safras/ciclos
model ProductionCycle {
  id               String            @id @default(cuid())
  name             String
  productType      ProductType?
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean           @default(false)
  companyId        String
  company          Company           @relation(fields: [companyId], references: [id])
  harvests         Harvest[]
  buys             Buy[]
  beneficiations   Beneficiation[]
  consumptionsExit ConsumptionExit[]
  salesExit        SaleExit[]
  purchases        Purchase[]
  transfers        TransferExit[]
  applications     Application[]
  industryHarvests IndustryHarvest[]
  talhoes          CycleTalhao[]
  createdAt        DateTime          @default(now())

  forceMigration Int? @default(1)
}

//tabela para relacionar muitos talhões para muitos ciclos de produção 
model CycleTalhao {
  id               String            @id @default(cuid())
  cycleId          String
  cycle            ProductionCycle   @relation(fields: [cycleId], references: [id])
  talhaoId         String
  talhao           Talhao            @relation(fields: [talhaoId], references: [id])
  createdAt        DateTime          @default(now())
}

//classes
enum ProductClass {
  ADUBO_DE_BASE
  ADUBO_DE_COBERTURA
  HERBICIDA
  INSETICIDA
  FUNGICIDA
  OLEO_MINERAL
  ADJUVANTE
  CORRETIVO
  OUTROS
}

//unidade
enum Unit {
  TN
  KG
  GR
  L
  ML
  SC
  UN
  CX
}

//tipo de operação
enum InsumoOperationType {
  COMPRA
  TRANSFERENCIA
  APLICACAO
}

//produtos
model Product {
  id          String         @id @default(cuid())
  name        String
  description String?
  class       ProductClass
  unit        Unit
  companyId   String
  company     Company        @relation(fields: [companyId], references: [id])
  purchases   Purchase[]
  transfers   TransferExit[]
  stocks      ProductStock[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// tabela de estoque por produto em cada fazenda
model ProductStock {
  id           String        @id @default(cuid())
  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  farmId       String
  farm         Farm          @relation(fields: [farmId], references: [id])
  stock        Float         @default(0)
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]

  @@unique([productId, farmId]) // garante 1 registro por produto em cada fazenda
}

//compras
model Purchase {
  id               String              @id @default(cuid())
  productId        String
  product          Product             @relation(fields: [productId], references: [id])
  date             DateTime
  quantity         Float
  invoiceNumber    String
  unitPrice        Float
  totalPrice       Float
  customerId       String
  customer         Customer            @relation(fields: [customerId], references: [id])
  notes            String?
  farmId           String
  farm             Farm                @relation(fields: [farmId], references: [id])
  companyId        String
  company          Company             @relation(fields: [companyId], references: [id])
  type             InsumoOperationType @default(COMPRA)
  cycleId          String?
  cycle            ProductionCycle?    @relation(fields: [cycleId], references: [id])
  paymentCondition PaymentCondition?
  dueDate          DateTime?
  accountPayable   AccountPayable?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

//transferências
model TransferExit {
  id           String              @id @default(cuid())
  date         DateTime
  productId    String
  product      Product             @relation(fields: [productId], references: [id])
  quantity     Float
  originFarmId String
  originFarm   Farm                @relation("OriginFarm", fields: [originFarmId], references: [id])
  destFarmId   String
  destFarm     Farm                @relation("DestFarm", fields: [destFarmId], references: [id])
  companyId    String
  company      Company             @relation(fields: [companyId], references: [id])
  type         InsumoOperationType @default(TRANSFERENCIA)
  cycleId      String?
  cycle        ProductionCycle?    @relation(fields: [cycleId], references: [id])
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

//aplicações
model Application {
  id             String              @id @default(cuid())
  date           DateTime
  productStockId String
  productStock   ProductStock        @relation(fields: [productStockId], references: [id])
  quantity       Float
  talhaoId       String
  talhao         Talhao              @relation(fields: [talhaoId], references: [id])
  notes          String?
  companyId      String
  company        Company             @relation(fields: [companyId], references: [id])
  type           InsumoOperationType @default(APLICACAO)
  cycleId        String?
  cycle          ProductionCycle?    @relation(fields: [cycleId], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}

//MÓDULO FINANCEIRO

//condicao de pagamento
enum PaymentCondition {
  AVISTA
  APRAZO
}

//status da conta
enum AccountStatus {
  PENDING
  PAID
  OVERDUE
  CANCELED
}

//conta a pagar
model AccountPayable {
  id          String        @id @default(cuid())
  description String
  amount      Float
  dueDate     DateTime
  paymentDate DateTime?
  status      AccountStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  // Relacionamentos opcionais
  buyId String? @unique
  buy   Buy?    @relation(fields: [buyId], references: [id])

  purchaseId String?   @unique
  purchase   Purchase? @relation(fields: [purchaseId], references: [id])

  // relacionamento com cliente
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
}

//conta a receber
model AccountReceivable {
  id           String        @id @default(cuid())
  description  String
  amount       Float
  dueDate      DateTime
  receivedDate DateTime?
  status       AccountStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  saleExitId String?   @unique
  saleExit   SaleExit? @relation(fields: [saleExitId], references: [id])

  // relacionamento com cliente
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
}

//MÓDULO DE COLHEITA INDÚSTRIA
model IndustryDeposit {
  id               String            @id @default(cuid())
  name             String
  companyId        String
  company          Company           @relation(fields: [companyId], references: [id])
  industryHarvests IndustryHarvest[]
  industryStocks   IndustryStock[]
}

model IndustryStock {
  id                String          @id @default(cuid())
  product           ProductType
  industryDepositId String
  industryDeposit   IndustryDeposit @relation(fields: [industryDepositId], references: [id])
  quantity          Decimal         @db.Decimal(12, 2)
  companyId         String
  company           Company         @relation(fields: [companyId], references: [id])

  @@unique([product, industryDepositId], name: "product_industryDepositId")
}

model IndustryTransporter {
  id               String            @id @default(cuid())
  name             String
  fantasyName      String?
  cpf_cnpj         String?             @unique
  adress           String?
  city             String?
  state            String?
  phone            String?
  email            String?
  industryHarvests IndustryHarvest[]
  companyId        String
  company          Company           @relation(fields: [companyId], references: [id])
}

model IndustryHarvest {
  id                    String               @id @default(cuid())
  date                  DateTime
  document              String?
  //produto colhido
  product               ProductType
  //talhão colhido
  talhaoId              String
  talhao                Talhao               @relation(fields: [talhaoId], references: [id])
  //local de armazenamento
  industryDepositId     String
  industryDeposit       IndustryDeposit      @relation(fields: [industryDepositId], references: [id])
  //transporte
  industryTransporterId String?
  industryTransporter   IndustryTransporter? @relation(fields: [industryTransporterId], references: [id])
  truckPlate            String?
  truckDriver            String?
  //classificação no destino
  weightBt              Decimal              @db.Decimal(12, 2) // Peso bruto
  weightTr              Decimal              @db.Decimal(12, 2) // Tara
  weightSubLiq          Decimal              @db.Decimal(12, 2) // Sub Líquido
  humidity_percent      Decimal              @db.Decimal(5, 2) // Percentual umidade
  humidity_discount     Decimal              @db.Decimal(12, 2) // Desconto umidade
  humidity_kg           Decimal              @db.Decimal(12, 2) // KG umidade
  impurities_percent    Decimal              @db.Decimal(5, 2) // Percentual impurezas
  impurities_discount   Decimal              @db.Decimal(12, 2) // Desconto impurezas
  impurities_kg         Decimal              @db.Decimal(12, 2) // KG impurezas
  weightLiq             Decimal              @db.Decimal(12, 2) // Peso líquido final
  cycleId               String?
  cycle                 ProductionCycle?     @relation(fields: [cycleId], references: [id])
  companyId             String
  company               Company              @relation(fields: [companyId], references: [id])
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
}
