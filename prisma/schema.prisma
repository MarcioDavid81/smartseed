// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// empresa
model Company {
  id               String            @id @default(uuid())
  name             String
  plan             Plan?             @default(BASIC)
  farms            Farm[]
  users            User[]
  customers        Customer[]
  cultivars        Cultivar[]
  talhoes          Talhao[]
  harvests         Harvest[]
  beneficiations   Beneficiation[]
  buys             Buy[]
  consumptionsExit ConsumptionExit[]
  salesExit        SaleExit[]
  products         Product[]
  purchases        Purchase[]
  transfers        TransferExit[]
  applications     Application[]
  productStocks    ProductStock[]
  productionCycles ProductionCycle[]
  createdAt        DateTime          @default(now())
}

// fazenda
model Farm {
  id               String            @id @default(uuid())
  name             String
  talhoes          Talhao[]
  area             Float
  consumptionsExit ConsumptionExit[]
  productStocks    ProductStock[]
  purchases        Purchase[]
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        String
  originTransfers  TransferExit[]    @relation("OriginFarm")
  destTransfers    TransferExit[]    @relation("DestFarm")
  createdAt        DateTime          @default(now())
}

// usuário
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  imageUrl  String?
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  role      Role?    @default(USER)
  createdAt DateTime @default(now())
}

// plano
enum Plan {
  BASIC
  PREMIUM
}

//roles
enum Role {
  ADMIN
  USER
}

// clientes
model Customer {
  id        String     @id @default(uuid())
  name      String
  email     String?
  adress    String?
  city      String?
  state     String?
  phone     String?
  cpf_cnpj  String?    @unique
  company   Company    @relation(fields: [companyId], references: [id])
  companyId String
  sales     SaleExit[]
  buys      Buy[]
  purchases Purchase[]
  createdAt DateTime   @default(now())
}

// enums para produtos
enum ProductType {
  SOJA
  TRIGO
  MILHO
  AVEIA_BRANCA
  AVEIA_PRETA
  AVEIA_UCRANIANA
  AZEVEM
}

//enums para operações
enum OperationType {
  Colheita
  Compra
  Descarte
  Venda
  Plantio
}

//talhões
model Talhao {
  id           String        @id @default(cuid())
  name         String
  area         Float
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    String
  farmId       String
  farm         Farm          @relation(fields: [farmId], references: [id])
  harvests     Harvest[]
  applications Application[]
  createdAt    DateTime      @default(now())
}

// status do cultivar
enum CultivarStatus {
  BENEFICIANDO
  BENEFICIADO
}

// produto/cultivar (variedade específica)
model Cultivar {
  id               String            @id @default(cuid())
  name             String
  product          ProductType
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        String
  harvests         Harvest[]
  buys             Buy[]
  beneficiations   Beneficiation[]
  consumptionsExit ConsumptionExit[]
  saleExit         SaleExit[]
  stock            Float             @default(0)
  status           CultivarStatus    @default(BENEFICIANDO)
  createdAt        DateTime          @default(now())
}

// colheita
model Harvest {
  id         String           @id @default(cuid())
  cultivarId String
  cultivar   Cultivar         @relation(fields: [cultivarId], references: [id])
  date       DateTime
  quantityKg Float
  talhaoId   String
  talhao     Talhao           @relation(fields: [talhaoId], references: [id])
  companyId  String
  company    Company          @relation(fields: [companyId], references: [id])
  notes      String?
  type       OperationType    @default(Colheita)
  cycleId    String?
  cycle      ProductionCycle? @relation(fields: [cycleId], references: [id])
  createdAt  DateTime         @default(now())
}

//compras
model Buy {
  id         String           @id @default(cuid())
  cultivarId String
  cultivar   Cultivar         @relation(fields: [cultivarId], references: [id])
  date       DateTime
  invoice    String
  unityPrice Float
  totalPrice Float
  customerId String
  customer   Customer         @relation(fields: [customerId], references: [id])
  quantityKg Float
  notes      String?
  companyId  String
  company    Company          @relation(fields: [companyId], references: [id])
  type       OperationType    @default(Compra)
  cycleId    String?
  cycle      ProductionCycle? @relation(fields: [cycleId], references: [id])
  createdAt  DateTime         @default(now())
}

// beneficiamento
model Beneficiation {
  id         String           @id @default(cuid())
  cultivarId String
  cultivar   Cultivar         @relation(fields: [cultivarId], references: [id])
  date       DateTime
  quantityKg Float
  notes      String?
  companyId  String
  company    Company          @relation(fields: [companyId], references: [id])
  type       OperationType    @default(Descarte)
  cycleId    String?
  cycle      ProductionCycle? @relation(fields: [cycleId], references: [id])
  createdAt  DateTime         @default(now())
}

//saída para plantio
model ConsumptionExit {
  id         String           @id @default(cuid())
  cultivarId String
  cultivar   Cultivar         @relation(fields: [cultivarId], references: [id])
  date       DateTime
  quantityKg Float
  farmId     String
  farm       Farm             @relation(fields: [farmId], references: [id])
  notes      String?
  companyId  String
  company    Company          @relation(fields: [companyId], references: [id])
  type       OperationType    @default(Plantio)
  cycleId    String?
  cycle      ProductionCycle? @relation(fields: [cycleId], references: [id])
  createdAt  DateTime         @default(now())
}

//venda
model SaleExit {
  id            String           @id @default(cuid())
  cultivarId    String
  cultivar      Cultivar         @relation(fields: [cultivarId], references: [id])
  date          DateTime
  quantityKg    Float
  customerId    String?
  customer      Customer?        @relation(fields: [customerId], references: [id])
  invoiceNumber String?
  saleValue     Float?
  notes         String?
  companyId     String
  company       Company          @relation(fields: [companyId], references: [id])
  type          OperationType    @default(Venda)
  cycleId       String?
  cycle         ProductionCycle? @relation(fields: [cycleId], references: [id])
  createdAt     DateTime         @default(now())
}

//safras/ciclos
model ProductionCycle {
  id               String            @id @default(cuid())
  name             String
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean           @default(false)
  companyId        String
  company          Company           @relation(fields: [companyId], references: [id])
  harvests         Harvest[]
  buys             Buy[]
  beneficiations   Beneficiation[]
  consumptionsExit ConsumptionExit[]
  salesExit        SaleExit[]
  purchases        Purchase[]
  transfers        TransferExit[]
  applications     Application[]
  createdAt        DateTime          @default(now())
}

//classes
enum ProductClass {
  ADUBO_DE_BASE
  ADUBO_DE_COBERTURA
  HERBICIDA
  INSETICIDA
  FUNGICIDA
  OLEO_MINERAL
  ADJUVANTE
  CORRETIVO
  OUTROS
}

//unidade
enum Unit {
  TN
  KG
  GR
  L
  ML
  SC
  UN
  CX
}

//tipo de operação
enum InsumoOperationType {
  COMPRA
  TRANSFERENCIA
  APLICACAO
}

//produtos
model Product {
  id          String         @id @default(cuid())
  name        String
  description String?
  class       ProductClass
  unit        Unit
  companyId   String
  company     Company        @relation(fields: [companyId], references: [id])
  purchases   Purchase[]
  transfers   TransferExit[]
  stocks      ProductStock[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// tabela de estoque por produto em cada fazenda
model ProductStock {
  id           String        @id @default(cuid())
  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  farmId       String
  farm         Farm          @relation(fields: [farmId], references: [id])
  stock        Float         @default(0)
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  applications Application[]

  @@unique([productId, farmId]) // garante 1 registro por produto em cada fazenda
}

//compras
model Purchase {
  id            String              @id @default(cuid())
  productId     String
  product       Product             @relation(fields: [productId], references: [id])
  date          DateTime
  quantity      Float
  invoiceNumber String
  unitPrice     Float
  totalPrice    Float
  customerId    String
  customer      Customer            @relation(fields: [customerId], references: [id])
  notes         String?
  farmId        String
  farm          Farm                @relation(fields: [farmId], references: [id])
  companyId     String
  company       Company             @relation(fields: [companyId], references: [id])
  type          InsumoOperationType @default(COMPRA)
  cycleId       String?
  cycle         ProductionCycle?    @relation(fields: [cycleId], references: [id])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

//transferências
model TransferExit {
  id           String              @id @default(cuid())
  date         DateTime
  productId    String
  product      Product             @relation(fields: [productId], references: [id])
  quantity     Float
  originFarmId String
  originFarm   Farm                @relation("OriginFarm", fields: [originFarmId], references: [id])
  destFarmId   String
  destFarm     Farm                @relation("DestFarm", fields: [destFarmId], references: [id])
  companyId    String
  company      Company             @relation(fields: [companyId], references: [id])
  type         InsumoOperationType @default(TRANSFERENCIA)
  cycleId      String?
  cycle        ProductionCycle?    @relation(fields: [cycleId], references: [id])
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

//aplicações
model Application {
  id             String              @id @default(cuid())
  date           DateTime
  productStockId String
  productStock   ProductStock        @relation(fields: [productStockId], references: [id])
  quantity       Float
  talhaoId       String
  talhao         Talhao              @relation(fields: [talhaoId], references: [id])
  notes          String?
  companyId      String
  company        Company             @relation(fields: [companyId], references: [id])
  type           InsumoOperationType @default(APLICACAO)
  cycleId        String?
  cycle          ProductionCycle?    @relation(fields: [cycleId], references: [id])
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
}
