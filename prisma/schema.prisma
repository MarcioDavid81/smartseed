// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  users     User[]
  cultivars Cultivar[]
  createdAt DateTime @default(now())
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  createdAt DateTime @default(now())
}

// enums para produtos
enum ProductType {
  SOJA
  TRIGO
  MILHO
  AVEIA_BRANCA
  AVEIA_PRETA
  AVEIA_UCRANIANA
  AZEVEM
}

// produto/cultivar (variedade espec√≠fica)
model Cultivar {
  id         String       @id @default(cuid())
  name       String
  product    ProductType
  company    Company  @relation(fields: [companyId], references: [id])
  companyId  String
  rawEntries RawEntry[]
  createdAt  DateTime     @default(now())
}

// entrada bruta
model RawEntry {
  id          String         @id @default(cuid())
  cultivarId  String
  cultivar    Cultivar       @relation(fields: [cultivarId], references: [id])
  date        DateTime
  quantityKg  Float
  origin      String?
  userId      String
  notes       String?
  createdAt   DateTime       @default(now())

  beneficiations Beneficiation[]
}

// beneficiamento
model Beneficiation {
  id           String       @id @default(cuid())
  rawEntryId   String
  rawEntry     RawEntry     @relation(fields: [rawEntryId], references: [id])
  date         DateTime
  inputKg      Float
  outputKg     Float
  wasteKg      Float
  notes        String?
  userId       String
  createdAt    DateTime     @default(now())

  finalStock   FinalStock?
}

// estoque final
model FinalStock {
  id                String         @id @default(cuid())
  beneficiationId   String         @unique
  beneficiation     Beneficiation  @relation(fields: [beneficiationId], references: [id])
  storageLocation   String
  availableKg       Float
  userId            String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

